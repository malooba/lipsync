using System;
using System.Linq;
using MaloobaLipSync.Correlator;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace FrameCorrelatorTest
{
    [TestClass]
    public class AudioCorrelatorTest
    {
        private string[] audioFingerprints =
        {
            "C09E545F86",
            "B5D03E8B2D",
            "F1B6FFA582",
            "69CD20901F",
            "A67A2FEF4D",
            "8578CC9C3C",
            "38739C176C",
            "E3307FB424",
            "92C582E4C7",
            "FD547A7966",
            "7C52607972",
            "51F255730C",
            "94A0B1B785",
            "48BE0DEA82",
            "B16ABD779A",
            "261EB9F7C2",
            "1046CF4FD8",
            "4292CF7065",
            "51D958F2B4",
            "9E9DDE391E",
            "BFF8E6B689",
            "F54004A204",
            "49346A3BB4",
            "9AD7270ED6",
            "7D8C08EEA7"
        };

        [TestMethod]
        public void TestExactMatch()
        {
            var expected = new[]
            {
                0x0ad, 0x0b0, 0x0af, 0x0af, 0x0a5, 0x0a6, 0x0a0, 0x0a4, 0x0a5, 0x0a5,
                0x0a8, 0x0a9, 0x0a5, 0x0a3, 0x0a0, 0x0a5, 0x0a1, 0x0a3, 0x0a3, 0x0a5,
                0x0a4, 0x0a6, 0x09c, 0x0aa, 0x0a3, 0x0a0, 0x0a0, 0x0a9, 0x099, 0x09a,
                0x09f, 0x0a2, 0x09f, 0x0a3, 0x096, 0x09b, 0x09d, 0x09a, 0x09f, 0x09e,
                0x0a2, 0x0a6, 0x0a6, 0x0a9, 0x093, 0x0a1, 0x0a4, 0x0a9, 0x0a6, 0x09e,
                0x0a1, 0x0a2, 0x0aa, 0x0a4, 0x099, 0x0a3, 0x0a6, 0x0a6, 0x0a5, 0x0a1,
                0x098, 0x096, 0x096, 0x09c, 0x09a, 0x09a, 0x098, 0x09a, 0x09a, 0x09f,
                0x093, 0x09b, 0x09e, 0x09c, 0x0a1, 0x098, 0x09e, 0x094, 0x093, 0x0a3,
                0x09a, 0x0a6, 0x0a3, 0x0ab, 0x0a4, 0x0ac, 0x09b, 0x0a0, 0x0a4, 0x09f,
                0x0a0, 0x09e, 0x0a8, 0x0a1, 0x09c, 0x0a0, 0x091, 0x09e, 0x0a4, 0x09c,
                0x09a, 0x09f, 0x097, 0x096, 0x095, 0x094, 0x094, 0x097, 0x09b, 0x09d,
                0x09b, 0x0a1, 0x08c, 0x093, 0x09c, 0x09d, 0x099, 0x09d, 0x09e, 0x09b,
                0x0a8, 0x0a8, 0x0a3, 0x0a0, 0x09f, 0x09e, 0x0ad, 0x0a0, 0x0a2, 0x0a3,
                0x0a5, 0x0a0, 0x09d, 0x091, 0x098, 0x09f, 0x09e, 0x0a2, 0x0a7, 0x091,
                0x09c, 0x097, 0x0a1, 0x095, 0x09e, 0x093, 0x096, 0x09d, 0x09b, 0x097,
                0x09a, 0x09e, 0x095, 0x09b, 0x0a3, 0x0a2, 0x0a0, 0x09f, 0x09a, 0x093,
                0x0b3, 0x0a2, 0x0ad, 0x0a7, 0x0a7, 0x0a2, 0x0a1, 0x0b0, 0x0aa, 0x0aa,
                0x09a, 0x0a9, 0x098, 0x0ac, 0x0ab, 0x09c, 0x0a2, 0x09c, 0x09f, 0x097,
                0x0a4, 0x09a, 0x09c, 0x09c, 0x0ad, 0x095, 0x098, 0x09e, 0x092, 0x09a,
                0x09c, 0x098, 0x09d, 0x0a4, 0x0a0, 0x096, 0x091, 0x092, 0x097, 0x09a,
                0x147, 0x0b2, 0x0ad, 0x0a6, 0x0a6, 0x0ad, 0x0b4, 0x0b9, 0x0b1, 0x0ad, // Correlation spike at start of line
                0x0ae, 0x0ad, 0x0a1, 0x0ad, 0x0a6, 0x0a6, 0x0be, 0x0a9, 0x0a8, 0x0a4,
                0x0ae, 0x09f, 0x0a9, 0x0a6, 0x0a9, 0x0a3, 0x0b1, 0x0b0, 0x09b, 0x0ac,
                0x09e, 0x0ac, 0x0b0, 0x0b5, 0x0a5, 0x0a3, 0x0a7, 0x0a8, 0x0a9, 0x09f,
                0x0b0, 0x0a4, 0x0a9, 0x0aa, 0x0ac, 0x0ad, 0x0a7, 0x09f, 0x0a1, 0x0a6,
                0x0a3, 0x09e, 0x0a1, 0x0a2, 0x098, 0x094, 0x0a4, 0x09a, 0x0a5, 0x09d,
                0x09f, 0x093, 0x0a2, 0x0a1, 0x0a0, 0x09b, 0x099, 0x093, 0x09a, 0x09c,
                0x09f, 0x09d, 0x09d, 0x099, 0x0a7, 0x09e, 0x099, 0x097, 0x095, 0x0a0,
                0x0a4, 0x0a5, 0x0ab, 0x0a3, 0x0a1, 0x0a6, 0x0a5, 0x096, 0x08b, 0x0a4,
                0x0a4, 0x0a1, 0x09d, 0x09c, 0x096, 0x09f, 0x092, 0x09b, 0x098, 0x09b,
                0x098, 0x09d, 0x0a0, 0x09d, 0x090, 0x09c, 0x096, 0x099, 0x09d, 0x098,
                0x098, 0x094, 0x099, 0x093, 0x092, 0x09e, 0x095, 0x09a, 0x08f, 0x09a,
                0x09c, 0x0a8, 0x09d, 0x097, 0x0a6, 0x0a2, 0x0ab, 0x0a5, 0x0a1, 0x09d,
                0x09c, 0x0a0, 0x099, 0x09e, 0x0a0, 0x0a6, 0x0a1, 0x09e, 0x098, 0x096,
                0x098, 0x0a2, 0x0a7, 0x0a5, 0x0a5, 0x09e, 0x098, 0x09e, 0x0a4, 0x09a,
                0x09c, 0x09d, 0x09c, 0x0a2, 0x0a0, 0x099, 0x08d, 0x0a0, 0x097, 0x09a,
                0x0a4, 0x0ae, 0x0a6, 0x0a1, 0x0a2, 0x09f, 0x09d, 0x0ab, 0x0a1, 0x0a3,
                0x0a7, 0x09f, 0x096, 0x0a6, 0x09e, 0x0a0, 0x0a1, 0x0ad, 0x09c, 0x09f,
                0x09b, 0x0a0, 0x098, 0x0a3, 0x0a5, 0x0a5, 0x09c, 0x09b, 0x097, 0x0a1,
                0x099, 0x09b, 0x09b, 0x09c, 0x098, 0x095, 0x09b, 0x09a, 0x0a2, 0x095
            };

            bool presentA, presentB;
            // Fingerprints for second channel have data (A5A5A5) in the unused bits of the audio fingerprint
            var fingerprints =
                audioFingerprints.Select(a => Fingerprint.Parse($"01 28 12345612 000000{a} A5A5A5{a}")).ToList();

            var corr1 = AudioCorrelator.Correlate(0, fingerprints.Skip(5), 15, fingerprints, 25, out presentA, out presentB);

            CollectionAssert.AreEqual(expected, corr1);

            // Check that unused fingerprint bits are ignored 
            var corr2 = AudioCorrelator.Correlate(1, fingerprints.Skip(5), 15, fingerprints, 25, out presentA, out presentB);

            CollectionAssert.AreEqual(expected, corr2);
        }

        [TestMethod]
        public void TestEmptyMatch()
        {
            bool presentA, presentB;
            var fingerprints = audioFingerprints.Select(a => Fingerprint.Parse($"01 28 12345612 000000{a}")).ToList();
            var empty = audioFingerprints.Select(a => Fingerprint.Parse($"01 28 12345612 0000000000000000")).ToList();

            var corr1 = AudioCorrelator.Correlate(0, empty.Skip(5), 15, fingerprints, 25, out presentA, out presentB);
            CollectionAssert.AreEqual(null, corr1);

            var corr2 = AudioCorrelator.Correlate(0, fingerprints.Skip(5), 15, empty, 25, out presentA, out presentB);
            CollectionAssert.AreEqual(null, corr2);
        }
    }
}
